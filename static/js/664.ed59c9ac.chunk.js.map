{"version":3,"file":"static/js/664.ed59c9ac.chunk.js","mappings":"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","sources":["components/DetailsTv/DetailsTv.jsx","components/shared/settings/settings.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport './DetailsTv.css';\r\n\r\nimport theatre from '../../pictures/theatre.jpg';\r\nimport pic from '../../pictures/default.png';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport settings from '../shared/settings/settings';\r\nimport Slider from 'react-slick';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\n\r\nconst DetailsTv = () => {\r\n  const { id } = useParams();\r\n\r\n  const [detailsTv, setDetailsTv] = useState({\r\n    //tv\r\n    backdrop_path_tv: '',\r\n    poster_path_tv: '',\r\n    genres_tv: '',\r\n    title_tv: '',\r\n    vote_average_tv: '',\r\n    vote_count_tv: '',\r\n    original_language_tv: '',\r\n    episode_run_time_tv: '',\r\n    first_air_date_tv: '',\r\n    overview_tv: '',\r\n    taglineTV: '',\r\n\r\n    //cast\r\n    cast: [],\r\n\r\n    //trailers\r\n    trailers: [],\r\n\r\n    //reviews\r\n    reviews: [],\r\n\r\n    //loading\r\n    loading: false,\r\n  });\r\n\r\n  const fetchDetailsTv = useCallback(async () => {\r\n    const urlTvReviews = `https://api.themoviedb.org/3/tv/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`;\r\n    const urlTvVideo = `https://api.themoviedb.org/3/tv/${id}/videos?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n    const urlTvCast = `https://api.themoviedb.org/3/tv/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n    const urlTv = `https://api.themoviedb.org/3/tv/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n\r\n    const request = [\r\n      fetch(urlTv),\r\n      fetch(urlTvCast),\r\n      fetch(urlTvVideo),\r\n      fetch(urlTvReviews),\r\n    ];\r\n    const response = await Promise.all(request);\r\n    const data = await Promise.all(response.map((res) => res.json()));\r\n    //console.log(data[0]);\r\n    setDetailsTv({\r\n      backdrop_path_tv: data[0].backdrop_path,\r\n      genres_tv: data[0].genres,\r\n      episode_run_time_tv: data[0].episode_run_time,\r\n      title_tv: data[0].name,\r\n      vote_average_tv: data[0].vote_average,\r\n      vote_count_tv: data[0].vote_count,\r\n      first_air_date_tv: data[0].first_air_date,\r\n      original_language_tv: data[0].original_language,\r\n      overview_tv: data[0].overview,\r\n      poster_path_tv: data[0].poster_path,\r\n      taglineTV: data[0].tagline,\r\n      cast: data[1].cast,\r\n      trailers: data[2].results,\r\n      reviews: data[3].results,\r\n      loading: true,\r\n    });\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    fetchDetailsTv();\r\n  }, [fetchDetailsTv]);\r\n\r\n  const {\r\n    backdrop_path_tv,\r\n    genres_tv,\r\n    title_tv,\r\n    vote_average_tv,\r\n    vote_count_tv,\r\n    original_language_tv,\r\n    episode_run_time_tv,\r\n    first_air_date_tv,\r\n    overview_tv,\r\n    poster_path_tv,\r\n    taglineTV,\r\n    cast,\r\n    trailers,\r\n    reviews,\r\n  } = detailsTv;\r\n\r\n  let genTv = [];\r\n  if (genres_tv) {\r\n    for (let genre of genres_tv) {\r\n      genTv.push(genre['name']);\r\n    }\r\n  }\r\n  let finishTv = genTv.slice(0, 2).join(' | ');\r\n\r\n  let backgroundTv = backdrop_path_tv || poster_path_tv;\r\n\r\n  console.log(trailers);\r\n  // const slicedTrailers = trailers.length && trailers.slice(0, 3);\r\n\r\n  const settingsvideo = {\r\n    dots: false,\r\n    infinite: false,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 1,\r\n    autoplay: false,\r\n    speed: 3000,\r\n    autoplaySpeed: 2000,\r\n    pauseOnHover: false,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1200,\r\n        settings: {\r\n          slidesToShow: 3,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 992,\r\n        settings: {\r\n          slidesToShow: trailers.length > 2 ? 2 : trailers.length,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: trailers.length > 2 ? 2 : trailers.length,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 576,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  //console.log(taglineTV);\r\n  let content;\r\n  if (taglineTV === '' || taglineTV) {\r\n    content = (\r\n      <div id='details'>\r\n        <div className='details-header'>\r\n          <div className='details-header-image'>\r\n            <img\r\n              src={\r\n                backgroundTv === null\r\n                  ? theatre\r\n                  : 'https://image.tmdb.org/t/p/w1280' + backgroundTv\r\n              }\r\n              alt={title_tv}\r\n            />\r\n          </div>\r\n          <div className='details-header-details'>\r\n            <span className='details-header-details-title'>{title_tv}</span>\r\n            <span className='details-header-details-genres'>{finishTv}</span>\r\n            <span className='details-header-details-runtime-rating'>\r\n              {first_air_date_tv ? (\r\n                <>{first_air_date_tv.split('-').reverse().join('/')} | </>\r\n              ) : null}\r\n              {episode_run_time_tv.length > 0 ? (\r\n                <>{`${episode_run_time_tv.slice(0, 1)} mins | `}</>\r\n              ) : null}\r\n              {original_language_tv ? (\r\n                <>{`${original_language_tv.toUpperCase()} | `}</>\r\n              ) : null}\r\n              {vote_average_tv ? vote_average_tv : null}{' '}\r\n              {vote_count_tv ? <>{`(${vote_count_tv})`}</> : null}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='details-content container'>\r\n          {overview_tv.length > 0 ? (\r\n            <div className='details-content-overview'>\r\n              <h2 className='details-content-overview-title'>OVERVIEW</h2>\r\n              <p className='details-content-overview-content'>{overview_tv}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {cast.length > 0 ? (\r\n            <div className='details-content-cast'>\r\n              <div className='details-content-cast-header'>\r\n                <h2 className='details-content-cast-title'>CAST</h2>\r\n              </div>\r\n              <div className='details-content-cast-content'>\r\n                <Slider {...settings}>\r\n                  {cast.map((content) => (\r\n                    <div className='details-content-cast-item' key={content.id}>\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/person/${content.id}`,\r\n                          state: { id: content.id },\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            content.profile_path === null\r\n                              ? pic\r\n                              : 'https://image.tmdb.org/t/p/w300' +\r\n                                content.profile_path\r\n                          }\r\n                          alt={content.name}\r\n                        />\r\n                      </Link>\r\n                      <div className='details-content-cast-item-footer'>\r\n                        <p>{content.name}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </Slider>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {trailers.length ? (\r\n            <div className='details-content-trailers'>\r\n              <div className='details-content-trailers-header'>\r\n                <h2 className='details-content-trailers-title'>TRAILERS</h2>\r\n              </div>\r\n              <div className='details-content-trailers-content'>\r\n                <Slider {...settingsvideo}>\r\n                  {trailers.slice(0, 3).map((content) => (\r\n                    <div\r\n                      className='details-content-trailers-item'\r\n                      key={content.key}\r\n                    >\r\n                      <iframe\r\n                        src={`https://www.youtube.com/embed/${content.key}`}\r\n                        title={content.key}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </Slider>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className='details-content-reviews'>\r\n              <div className='details-content-reviews-header'>\r\n                <h2 className='details-content-reviews-title'>TRAILERS</h2>\r\n              </div>\r\n              <div className='details-content-reviews-content'>\r\n                <div className='details-content-review-item'>\r\n                  <p className='details-content-review-item-content'>\r\n                    There are no trailers for this TV Show.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className='details-content-reviews'>\r\n            <div className='details-content-reviews-header'>\r\n              <h2 className='details-content-reviews-title'>REVIEWS</h2>\r\n            </div>\r\n            <div className='details-content-reviews-content'>\r\n              {reviews.length > 0 ? (\r\n                reviews.map((review) => (\r\n                  <div\r\n                    className='details-content-review-item'\r\n                    key={review.author}\r\n                  >\r\n                    <h4 className='details-content-review-item-title'>\r\n                      {review.author}\r\n                    </h4>\r\n                    <p className='details-content-review-item-content'>\r\n                      {review.content.length > 300\r\n                        ? review.content.slice(0, 300)\r\n                        : review.content}\r\n                      ...\r\n                    </p>\r\n                    <a href={review.url}>View full review</a>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className='details-content-review-item'>\r\n                  <p className='details-content-review-item-content'>\r\n                    There are no reviews for this TV Show.\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <>{content}</>;\r\n};\r\n\r\nexport default DetailsTv;\r\n","const settings = {\r\n    dots: false,\r\n    infinite: false,\r\n    slidesToShow: 7,\r\n    slidesToScroll: 1,\r\n    autoplay: false,\r\n    speed: 3000,\r\n    autoplaySpeed: 2000,\r\n    pauseOnHover: false,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1200,\r\n        settings: {\r\n          slidesToShow: 5,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 992,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 576,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  export default settings;","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["id","useParams","useState","backdrop_path_tv","poster_path_tv","genres_tv","title_tv","vote_average_tv","vote_count_tv","original_language_tv","episode_run_time_tv","first_air_date_tv","overview_tv","taglineTV","cast","trailers","reviews","loading","detailsTv","setDetailsTv","fetchDetailsTv","useCallback","urlTvReviews","process","urlTvVideo","urlTvCast","urlTv","request","fetch","Promise","all","response","map","res","json","data","backdrop_path","genres","episode_run_time","name","vote_average","vote_count","first_air_date","original_language","overview","poster_path","tagline","results","useEffect","genTv","genre","push","finishTv","slice","join","backgroundTv","console","log","content","settingsvideo","dots","infinite","slidesToShow","slidesToScroll","autoplay","speed","autoplaySpeed","pauseOnHover","responsive","breakpoint","settings","length","className","src","theatre","alt","split","reverse","toUpperCase","to","pathname","state","profile_path","pic","key","title","review","author","href","url","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}