{"version":3,"file":"static/js/497.9dae7879.chunk.js","mappings":"qPAWA,MAgSA,EAhSqBA,KACnB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,OAERC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,CAE/CC,oBAAqB,GACrBC,kBAAmB,GACnBC,aAAc,GACdC,YAAa,GACbC,mBAAoB,GACpBC,iBAAkB,GAClBC,mBAAoB,GACpBC,cAAe,GACfC,wBAAyB,GACzBC,QAAS,GACTC,eAAgB,GAGhBC,KAAM,GAGNC,SAAU,GAGVC,QAAS,GAGTC,SAAS,IAGLC,GAAeC,EAAAA,EAAAA,cAAYC,UAC/B,MAAMC,EAAkB,sCAAsCvB,2EACxDwB,EAAgB,sCAAsCxB,mEACtDyB,EAAe,sCAAsCzB,qDAErD0B,EAAU,CACdC,MAFe,sCAAsC3B,6DAGrD2B,MAAMF,GACNE,MAAMH,GACNG,MAAMJ,IAEFK,QAAiBC,QAAQC,IAAIJ,GAC7BK,QAAaF,QAAQC,IAAIF,EAASI,KAAKC,GAAQA,EAAIC,UACzD/B,EAAgB,CACdE,oBAAqB0B,EAAK,GAAGI,cAC7B5B,aAAcwB,EAAK,GAAGK,OACtB5B,YAAauB,EAAK,GAAGM,MACrBvB,QAASiB,EAAK,GAAGjB,QACjBL,mBAAoBsB,EAAK,GAAGO,aAC5B5B,iBAAkBqB,EAAK,GAAGQ,WAC1B5B,mBAAoBoB,EAAK,GAAGS,aAC5B5B,cAAemB,EAAK,GAAGU,QACvB5B,wBAAyBkB,EAAK,GAAGW,kBACjC3B,eAAgBgB,EAAK,GAAGY,SACxBrC,kBAAmByB,EAAK,GAAGa,YAC3B5B,KAAMe,EAAK,GAAGf,KACdC,SAAUc,EAAK,GAAGc,QAClB3B,QAASa,EAAK,GAAGc,QACjB1B,SAAS,GACT,GACD,CAACnB,KAEJ8C,EAAAA,EAAAA,YAAU,KACR1B,GAAc,GACb,CAACA,IAEJ,MAAM,oBACJf,EAAmB,aACnBE,EAAY,YACZC,EAAW,mBACXC,EAAkB,iBAClBC,EAAgB,mBAChBC,EAAkB,cAClBC,EAAa,wBACbC,EAAuB,QACvBC,EAAO,eACPC,EAAc,kBACdT,EAAiB,KACjBU,EAAI,SACJC,EAAQ,QACRC,GACEhB,EAEJ,IAAI6C,EAAW,GACf,GAAIxC,EACF,IAAK,IAAIyC,KAASzC,EAChBwC,EAASE,KAAKD,EAAY,MAG9B,IAAIE,EAAcH,EAASI,MAAM,EAAG,GAAGC,KAAK,OAExCC,EAAkBhD,GAAuBC,EAE7C,MAAMgD,EAAiBrC,EAASkC,MAAM,EAAG,GAInCI,EAAgB,CACpBC,MAAM,EACNC,UAAU,EACVC,aAAc,EACdC,eAAgB,EAChBC,UAAU,EACVC,MAAO,IACPC,cAAe,IACfC,cAAc,EACdC,WAAY,CACV,CACEC,WAAY,KACZC,SAAU,CACRR,aAAc,EACdC,eAAgB,IAGpB,CACEM,WAAY,IACZC,SAAU,CACRR,aAAczC,EAASkD,OAAS,EAAI,EAAIlD,EAASkD,OACjDR,eAAgB,IAGpB,CACEM,WAAY,IACZC,SAAU,CACRR,aAAczC,EAASkD,OAAS,EAAI,EAAIlD,EAASkD,OACjDR,eAAgB,IAGpB,CACEM,WAAY,IACZC,SAAU,CACRR,aAAc,EACdC,eAAgB,MAMxB,IAAIS,EAmJJ,OAjJgB,KAAZtD,GAAkBA,KACpBsD,GACEC,EAAAA,EAAAA,MAAA,OAAKrE,GAAG,UAASsE,SAAA,EACfD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,iBAAgBD,SAAA,EAC7BE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,uBAAsBD,UACnCE,EAAAA,EAAAA,KAAA,OACEC,IACsB,OAApBpB,EACIqB,EACA,mCAAqCrB,EAE3CsB,IAAKnE,OAGT6D,EAAAA,EAAAA,MAAA,OAAKE,UAAU,yBAAwBD,SAAA,EACrCE,EAAAA,EAAAA,KAAA,QAAMD,UAAU,+BAA8BD,SAAE9D,KAChDgE,EAAAA,EAAAA,KAAA,QAAMD,UAAU,gCAA+BD,SAAEpB,KACjDmB,EAAAA,EAAAA,MAAA,QAAME,UAAU,wCAAuCD,SAAA,CACpD3D,GACC0D,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAN,SAAA,CAAG3D,EAAmBkE,MAAM,KAAKC,UAAU1B,KAAK,KAAK,SACnD,KACHxC,GAAgB4D,EAAAA,EAAAA,KAAAI,EAAAA,SAAA,CAAAN,SAAG,GAAG1D,cAA8B,KACpDC,GACCwD,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAN,SAAA,CAAGzD,EAAwBkE,cAAc,SACvC,KACHtE,EAAqBA,EAAmBuE,QAAQ,GAAK,KAAM,IAC3DtE,GAAmB8D,EAAAA,EAAAA,KAAAI,EAAAA,SAAA,CAAAN,SAAG,IAAI5D,OAA0B,SAEvD8D,EAAAA,EAAAA,KAAA,QAAMD,UAAU,iCAAgCD,SAC7CxD,GAAW,YAKlBuD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4BAA2BD,SAAA,CACvCvD,EAAeoD,OAAS,GACvBE,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BD,SAAA,EACvCE,EAAAA,EAAAA,KAAA,MAAID,UAAU,iCAAgCD,SAAC,cAC/CE,EAAAA,EAAAA,KAAA,KAAGD,UAAU,mCAAkCD,SAC5CvD,OAGH,KAEHC,EAAKmD,OAAS,GACbE,EAAAA,EAAAA,MAAA,OAAKE,UAAU,uBAAsBD,SAAA,EACnCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,8BAA6BD,UAC1CE,EAAAA,EAAAA,KAAA,MAAID,UAAU,6BAA4BD,SAAC,YAE7CE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,+BAA8BD,UAC3CE,EAAAA,EAAAA,KAACS,EAAAA,EAAM,IAAKf,EAAAA,EAAQI,SACjBtD,EAAKgB,KAAKoC,IACTC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4BAA2BD,SAAA,EACxCE,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CACHC,GAAI,CACFC,SAAU,WAAWhB,EAAQpE,KAC7BqF,MAAO,CAAErF,GAAIoE,EAAQpE,KACrBsE,UAEFE,EAAAA,EAAAA,KAAA,OACEC,IAC2B,OAAzBL,EAAQkB,aACJC,EACA,kCACAnB,EAAQkB,aAEdX,IAAKP,EAAQoB,UAGjBhB,EAAAA,EAAAA,KAAA,OAAKD,UAAU,mCAAkCD,UAC/CE,EAAAA,EAAAA,KAAA,KAAAF,SAAIF,EAAQoB,WAlBgCpB,EAAQpE,aAyB9D,MAEJqE,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BD,SAAA,EACvCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kCAAiCD,UAC9CE,EAAAA,EAAAA,KAAA,MAAID,UAAU,iCAAgCD,SAAC,gBAEjDE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,mCAAkCD,SAC9CrD,EAASkD,OAAS,GACjBK,EAAAA,EAAAA,KAACS,EAAAA,EAAM,IAAK1B,EAAae,SACtBhB,EAAetB,KAAKoC,IACnBI,EAAAA,EAAAA,KAAA,OACED,UAAU,gCAA+BD,UAGzCE,EAAAA,EAAAA,KAAA,UACEC,IAAK,iCAAmCL,EAAQqB,IAChDpD,MAAO+B,EAAQqB,OAJZrB,EAAQqB,UAUnBjB,EAAAA,EAAAA,KAAA,OAAKD,UAAU,8BAA6BD,UAC1CE,EAAAA,EAAAA,KAAA,KAAGD,UAAU,sCAAqCD,SAAC,kDAQ3DD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,0BAAyBD,SAAA,EACtCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,iCAAgCD,UAC7CE,EAAAA,EAAAA,KAAA,MAAID,UAAU,gCAA+BD,SAAC,eAEhDE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kCAAiCD,SAC7CpD,EAAQiD,OAAS,EAChBjD,EAAQc,KAAK0D,IACXrB,EAAAA,EAAAA,MAAA,OACEE,UAAU,8BAA6BD,SAAA,EAGvCE,EAAAA,EAAAA,KAAA,MAAID,UAAU,oCAAmCD,SAC9CoB,EAAOC,UAEVtB,EAAAA,EAAAA,MAAA,KAAGE,UAAU,sCAAqCD,SAAA,CAC/CoB,EAAOtB,QAAQD,OAAS,IACrBuB,EAAOtB,QAAQjB,MAAM,EAAG,KACxBuC,EAAOtB,QAAQ,UAGrBI,EAAAA,EAAAA,KAAA,KAAGoB,KAAMF,EAAOG,IAAIvB,SAAC,uBAXhBoB,EAAOC,WAehBnB,EAAAA,EAAAA,KAAA,OAAKD,UAAU,8BAA6BD,UAC1CE,EAAAA,EAAAA,KAAA,KAAGD,UAAU,sCAAqCD,SAAC,wDAY5DE,EAAAA,EAAAA,KAAAI,EAAAA,SAAA,CAAAN,SAAGF,GAAW,C,kCCxSvB,MAyCE,EAzCe,CACbZ,MAAM,EACNC,UAAU,EACVC,aAAc,EACdC,eAAgB,EAChBC,UAAU,EACVC,MAAO,IACPC,cAAe,IACfC,cAAc,EACdC,WAAY,CACV,CACEC,WAAY,KACZC,SAAU,CACRR,aAAc,EACdC,eAAgB,IAGpB,CACEM,WAAY,IACZC,SAAU,CACRR,aAAc,EACdC,eAAgB,IAGpB,CACEM,WAAY,IACZC,SAAU,CACRR,aAAc,EACdC,eAAgB,IAGpB,CACEM,WAAY,IACZC,SAAU,CACRR,aAAc,EACdC,eAAgB,K","sources":["components/DetailsMovie/DetailsMovie.jsx","components/shared/settings/settings.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport '../DetailsTv/DetailsTv.css';\r\n\r\nimport theatre from '../../pictures/theatre.jpg';\r\nimport pic from '../../pictures/default.png';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport settings from '../shared/settings/settings';\r\nimport Slider from 'react-slick';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\n\r\nconst DetailsMovie = () => {\r\n  const { id } = useParams();\r\n\r\n  const [detailsMovie, setDetailsMovie] = useState({\r\n    //movies\r\n    backdrop_path_movie: '',\r\n    poster_path_movie: '',\r\n    genres_movie: '',\r\n    title_movie: '',\r\n    vote_average_movie: '',\r\n    vote_count_movie: '',\r\n    release_date_movie: '',\r\n    runtime_movie: '',\r\n    original_language_movie: '',\r\n    tagline: '',\r\n    overview_movie: '',\r\n\r\n    //cast\r\n    cast: [],\r\n\r\n    //trailers\r\n    trailers: [],\r\n\r\n    //reviews\r\n    reviews: [],\r\n\r\n    //loading\r\n    loading: false,\r\n  });\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    const urlMovieReviews = `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`;\r\n    const urlMovieVideo = `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n    const urlMovieCast = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}`;\r\n    const urlMovie = `https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n    const request = [\r\n      fetch(urlMovie),\r\n      fetch(urlMovieCast),\r\n      fetch(urlMovieVideo),\r\n      fetch(urlMovieReviews),\r\n    ];\r\n    const response = await Promise.all(request);\r\n    const data = await Promise.all(response.map((res) => res.json()));\r\n    setDetailsMovie({\r\n      backdrop_path_movie: data[0].backdrop_path,\r\n      genres_movie: data[0].genres,\r\n      title_movie: data[0].title,\r\n      tagline: data[0].tagline,\r\n      vote_average_movie: data[0].vote_average,\r\n      vote_count_movie: data[0].vote_count,\r\n      release_date_movie: data[0].release_date,\r\n      runtime_movie: data[0].runtime,\r\n      original_language_movie: data[0].original_language,\r\n      overview_movie: data[0].overview,\r\n      poster_path_movie: data[0].poster_path,\r\n      cast: data[1].cast,\r\n      trailers: data[2].results,\r\n      reviews: data[3].results,\r\n      loading: true,\r\n    });\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    fetchDetails();\r\n  }, [fetchDetails]);\r\n\r\n  const {\r\n    backdrop_path_movie,\r\n    genres_movie,\r\n    title_movie,\r\n    vote_average_movie,\r\n    vote_count_movie,\r\n    release_date_movie,\r\n    runtime_movie,\r\n    original_language_movie,\r\n    tagline,\r\n    overview_movie,\r\n    poster_path_movie,\r\n    cast,\r\n    trailers,\r\n    reviews,\r\n  } = detailsMovie;\r\n\r\n  let genMovie = [];\r\n  if (genres_movie) {\r\n    for (let genre of genres_movie) {\r\n      genMovie.push(genre['name']);\r\n    }\r\n  }\r\n  let finishMovie = genMovie.slice(0, 2).join(' | ');\r\n\r\n  let backgroundMovie = backdrop_path_movie || poster_path_movie;\r\n\r\n  const slicedTrailers = trailers.slice(0, 3);\r\n\r\n  //console.log(trailers);\r\n\r\n  const settingsvideo = {\r\n    dots: false,\r\n    infinite: false,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 1,\r\n    autoplay: false,\r\n    speed: 3000,\r\n    autoplaySpeed: 2000,\r\n    pauseOnHover: false,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1200,\r\n        settings: {\r\n          slidesToShow: 3,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 992,\r\n        settings: {\r\n          slidesToShow: trailers.length > 2 ? 2 : trailers.length,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: trailers.length > 2 ? 2 : trailers.length,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 576,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  let content;\r\n\r\n  if (tagline === '' || tagline) {\r\n    content = (\r\n      <div id='details'>\r\n        <div className='details-header'>\r\n          <div className='details-header-image'>\r\n            <img\r\n              src={\r\n                backgroundMovie === null\r\n                  ? theatre\r\n                  : 'https://image.tmdb.org/t/p/w1280' + backgroundMovie\r\n              }\r\n              alt={title_movie}\r\n            />\r\n          </div>\r\n          <div className='details-header-details'>\r\n            <span className='details-header-details-title'>{title_movie}</span>\r\n            <span className='details-header-details-genres'>{finishMovie}</span>\r\n            <span className='details-header-details-runtime-rating'>\r\n              {release_date_movie ? (\r\n                <>{release_date_movie.split('-').reverse().join('/')} | </>\r\n              ) : null}\r\n              {runtime_movie ? <>{`${runtime_movie} mins | `}</> : null}\r\n              {original_language_movie ? (\r\n                <>{original_language_movie.toUpperCase()} | </>\r\n              ) : null}\r\n              {vote_average_movie ? vote_average_movie.toFixed(1) : null}{' '}\r\n              {vote_count_movie ? <>{`(${vote_count_movie})`}</> : null}\r\n            </span>\r\n            <span className='details-header-details-tagline'>\r\n              {tagline || ''}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='details-content container'>\r\n          {overview_movie.length > 0 ? (\r\n            <div className='details-content-overview'>\r\n              <h2 className='details-content-overview-title'>OVERVIEW</h2>\r\n              <p className='details-content-overview-content'>\r\n                {overview_movie}\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {cast.length > 0 ? (\r\n            <div className='details-content-cast'>\r\n              <div className='details-content-cast-header'>\r\n                <h2 className='details-content-cast-title'>CAST</h2>\r\n              </div>\r\n              <div className='details-content-cast-content'>\r\n                <Slider {...settings}>\r\n                  {cast.map((content) => (\r\n                    <div className='details-content-cast-item' key={content.id}>\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/person/${content.id}`,\r\n                          state: { id: content.id },\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            content.profile_path === null\r\n                              ? pic\r\n                              : 'https://image.tmdb.org/t/p/w300' +\r\n                                content.profile_path\r\n                          }\r\n                          alt={content.name}\r\n                        />\r\n                      </Link>\r\n                      <div className='details-content-cast-item-footer'>\r\n                        <p>{content.name}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </Slider>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className='details-content-trailers'>\r\n            <div className='details-content-trailers-header'>\r\n              <h2 className='details-content-trailers-title'>TRAILERS</h2>\r\n            </div>\r\n            <div className='details-content-trailers-content'>\r\n              {trailers.length > 0 ? (\r\n                <Slider {...settingsvideo}>\r\n                  {slicedTrailers.map((content) => (\r\n                    <div\r\n                      className='details-content-trailers-item'\r\n                      key={content.key}\r\n                    >\r\n                      <iframe\r\n                        src={'https://www.youtube.com/embed/' + content.key}\r\n                        title={content.key}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </Slider>\r\n              ) : (\r\n                <div className='details-content-review-item'>\r\n                  <p className='details-content-review-item-content'>\r\n                    There are no trailers for this movie.\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='details-content-reviews'>\r\n            <div className='details-content-reviews-header'>\r\n              <h2 className='details-content-reviews-title'>REVIEWS</h2>\r\n            </div>\r\n            <div className='details-content-reviews-content'>\r\n              {reviews.length > 0 ? (\r\n                reviews.map((review) => (\r\n                  <div\r\n                    className='details-content-review-item'\r\n                    key={review.author}\r\n                  >\r\n                    <h4 className='details-content-review-item-title'>\r\n                      {review.author}\r\n                    </h4>\r\n                    <p className='details-content-review-item-content'>\r\n                      {review.content.length > 300\r\n                        ? review.content.slice(0, 300)\r\n                        : review.content}\r\n                      ...\r\n                    </p>\r\n                    <a href={review.url}>View full review</a>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className='details-content-review-item'>\r\n                  <p className='details-content-review-item-content'>\r\n                    There are no reviews for this movie.\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <>{content}</>;\r\n};\r\n\r\nexport default DetailsMovie;\r\n","const settings = {\r\n    dots: false,\r\n    infinite: false,\r\n    slidesToShow: 7,\r\n    slidesToScroll: 1,\r\n    autoplay: false,\r\n    speed: 3000,\r\n    autoplaySpeed: 2000,\r\n    pauseOnHover: false,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1200,\r\n        settings: {\r\n          slidesToShow: 5,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 992,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 576,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  export default settings;"],"names":["DetailsMovie","id","useParams","detailsMovie","setDetailsMovie","useState","backdrop_path_movie","poster_path_movie","genres_movie","title_movie","vote_average_movie","vote_count_movie","release_date_movie","runtime_movie","original_language_movie","tagline","overview_movie","cast","trailers","reviews","loading","fetchDetails","useCallback","async","urlMovieReviews","urlMovieVideo","urlMovieCast","request","fetch","response","Promise","all","data","map","res","json","backdrop_path","genres","title","vote_average","vote_count","release_date","runtime","original_language","overview","poster_path","results","useEffect","genMovie","genre","push","finishMovie","slice","join","backgroundMovie","slicedTrailers","settingsvideo","dots","infinite","slidesToShow","slidesToScroll","autoplay","speed","autoplaySpeed","pauseOnHover","responsive","breakpoint","settings","length","content","_jsxs","children","className","_jsx","src","theatre","alt","_Fragment","split","reverse","toUpperCase","toFixed","Slider","Link","to","pathname","state","profile_path","pic","name","key","review","author","href","url"],"sourceRoot":""}