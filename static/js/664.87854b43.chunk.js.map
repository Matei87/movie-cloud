{"version":3,"file":"static/js/664.87854b43.chunk.js","mappings":"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","sources":["components/DetailsTv/DetailsTv.jsx","components/shared/settings/settings.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport './DetailsTv.css';\r\n\r\nimport theatre from '../../pictures/theatre.jpg';\r\nimport pic from '../../pictures/default.png';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport settings from '../shared/settings/settings';\r\nimport Slider from 'react-slick';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\n\r\nconst DetailsTv = () => {\r\n  const { id } = useParams();\r\n\r\n  const [detailsTv, setDetailsTv] = useState({\r\n    //tv\r\n    backdrop_path_tv: '',\r\n    poster_path_tv: '',\r\n    genres_tv: '',\r\n    title_tv: '',\r\n    vote_average_tv: '',\r\n    vote_count_tv: '',\r\n    original_language_tv: '',\r\n    episode_run_time_tv: '',\r\n    first_air_date_tv: '',\r\n    overview_tv: '',\r\n    taglineTV: '',\r\n\r\n    //cast\r\n    cast: [],\r\n\r\n    //trailers\r\n    trailers: [],\r\n\r\n    //reviews\r\n    reviews: [],\r\n\r\n    //loading\r\n    loading: false,\r\n  });\r\n\r\n  const fetchDetailsTv = useCallback(async () => {\r\n    const urlTvReviews = `https://api.themoviedb.org/3/tv/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`;\r\n    const urlTvVideo = `https://api.themoviedb.org/3/tv/${id}/videos?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n    const urlTvCast = `https://api.themoviedb.org/3/tv/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n    const urlTv = `https://api.themoviedb.org/3/tv/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\r\n\r\n    const request = [\r\n      fetch(urlTv),\r\n      fetch(urlTvCast),\r\n      fetch(urlTvVideo),\r\n      fetch(urlTvReviews),\r\n    ];\r\n    const response = await Promise.all(request);\r\n    const data = await Promise.all(response.map((res) => res.json()));\r\n    //console.log(data[0]);\r\n    setDetailsTv({\r\n      backdrop_path_tv: data[0].backdrop_path,\r\n      genres_tv: data[0].genres,\r\n      episode_run_time_tv: data[0].episode_run_time,\r\n      title_tv: data[0].name,\r\n      vote_average_tv: data[0].vote_average,\r\n      vote_count_tv: data[0].vote_count,\r\n      first_air_date_tv: data[0].first_air_date,\r\n      original_language_tv: data[0].original_language,\r\n      overview_tv: data[0].overview,\r\n      poster_path_tv: data[0].poster_path,\r\n      taglineTV: data[0].tagline,\r\n      cast: data[1].cast,\r\n      trailers: data[2].results,\r\n      reviews: data[3].results,\r\n      loading: true,\r\n    });\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    fetchDetailsTv();\r\n  }, [fetchDetailsTv]);\r\n\r\n  const {\r\n    backdrop_path_tv,\r\n    genres_tv,\r\n    title_tv,\r\n    vote_average_tv,\r\n    vote_count_tv,\r\n    original_language_tv,\r\n    episode_run_time_tv,\r\n    first_air_date_tv,\r\n    overview_tv,\r\n    poster_path_tv,\r\n    taglineTV,\r\n    cast,\r\n    trailers,\r\n    reviews,\r\n  } = detailsTv;\r\n\r\n  let genTv = [];\r\n  if (genres_tv) {\r\n    for (let genre of genres_tv) {\r\n      genTv.push(genre['name']);\r\n    }\r\n  }\r\n  let finishTv = genTv.slice(0, 2).join(' | ');\r\n\r\n  let backgroundTv = backdrop_path_tv || poster_path_tv;\r\n\r\n  // const slicedTrailers = trailers.length && trailers.slice(0, 3);\r\n\r\n  const settingsvideo = {\r\n    dots: false,\r\n    infinite: false,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 1,\r\n    autoplay: false,\r\n    speed: 3000,\r\n    autoplaySpeed: 2000,\r\n    pauseOnHover: false,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1200,\r\n        settings: {\r\n          slidesToShow: 3,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 992,\r\n        settings: {\r\n          slidesToShow: trailers.length > 2 ? 2 : trailers.length,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: trailers.length > 2 ? 2 : trailers.length,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 576,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  //console.log(taglineTV);\r\n  let content;\r\n  if (taglineTV === '' || taglineTV) {\r\n    content = (\r\n      <div id='details'>\r\n        <div className='details-header'>\r\n          <div className='details-header-image'>\r\n            <img\r\n              src={\r\n                backgroundTv === null\r\n                  ? theatre\r\n                  : 'https://image.tmdb.org/t/p/w1280' + backgroundTv\r\n              }\r\n              alt={title_tv}\r\n            />\r\n          </div>\r\n          <div className='details-header-details'>\r\n            <span className='details-header-details-title'>{title_tv}</span>\r\n            <span className='details-header-details-genres'>{finishTv}</span>\r\n            <span className='details-header-details-runtime-rating'>\r\n              {first_air_date_tv ? (\r\n                <>{first_air_date_tv.split('-').reverse().join('/')} | </>\r\n              ) : null}\r\n              {episode_run_time_tv.length > 0 ? (\r\n                <>{`${episode_run_time_tv.slice(0, 1)} mins | `}</>\r\n              ) : null}\r\n              {original_language_tv ? (\r\n                <>{`${original_language_tv.toUpperCase()} | `}</>\r\n              ) : null}\r\n              {vote_average_tv ? vote_average_tv.toFixed(1) : null}{' '}\r\n              {vote_count_tv ? <>{`(${vote_count_tv})`}</> : null}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='details-content container'>\r\n          {overview_tv.length > 0 ? (\r\n            <div className='details-content-overview'>\r\n              <h2 className='details-content-overview-title'>OVERVIEW</h2>\r\n              <p className='details-content-overview-content'>{overview_tv}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {cast.length > 0 ? (\r\n            <div className='details-content-cast'>\r\n              <div className='details-content-cast-header'>\r\n                <h2 className='details-content-cast-title'>CAST</h2>\r\n              </div>\r\n              <div className='details-content-cast-content'>\r\n                <Slider {...settings}>\r\n                  {cast.map((content) => (\r\n                    <div className='details-content-cast-item' key={content.id}>\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/person/${content.id}`,\r\n                          state: { id: content.id },\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            content.profile_path === null\r\n                              ? pic\r\n                              : 'https://image.tmdb.org/t/p/w300' +\r\n                                content.profile_path\r\n                          }\r\n                          alt={content.name}\r\n                        />\r\n                      </Link>\r\n                      <div className='details-content-cast-item-footer'>\r\n                        <p>{content.name}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </Slider>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {trailers.length ? (\r\n            <div className='details-content-trailers'>\r\n              <div className='details-content-trailers-header'>\r\n                <h2 className='details-content-trailers-title'>TRAILERS</h2>\r\n              </div>\r\n              <div className='details-content-trailers-content'>\r\n                <Slider {...settingsvideo}>\r\n                  {trailers.slice(0, 3).map((content) => (\r\n                    <div\r\n                      className='details-content-trailers-item'\r\n                      key={content.key}\r\n                    >\r\n                      <iframe\r\n                        src={`https://www.youtube.com/embed/${content.key}`}\r\n                        title={content.key}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </Slider>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className='details-content-reviews'>\r\n              <div className='details-content-reviews-header'>\r\n                <h2 className='details-content-reviews-title'>TRAILERS</h2>\r\n              </div>\r\n              <div className='details-content-reviews-content'>\r\n                <div className='details-content-review-item'>\r\n                  <p className='details-content-review-item-content'>\r\n                    There are no trailers for this TV Show.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className='details-content-reviews'>\r\n            <div className='details-content-reviews-header'>\r\n              <h2 className='details-content-reviews-title'>REVIEWS</h2>\r\n            </div>\r\n            <div className='details-content-reviews-content'>\r\n              {reviews.length > 0 ? (\r\n                reviews.map((review) => (\r\n                  <div\r\n                    className='details-content-review-item'\r\n                    key={review.author}\r\n                  >\r\n                    <h4 className='details-content-review-item-title'>\r\n                      {review.author}\r\n                    </h4>\r\n                    <p className='details-content-review-item-content'>\r\n                      {review.content.length > 300\r\n                        ? review.content.slice(0, 300)\r\n                        : review.content}\r\n                      ...\r\n                    </p>\r\n                    <a href={review.url}>View full review</a>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className='details-content-review-item'>\r\n                  <p className='details-content-review-item-content'>\r\n                    There are no reviews for this TV Show.\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <>{content}</>;\r\n};\r\n\r\nexport default DetailsTv;\r\n","const settings = {\r\n    dots: false,\r\n    infinite: false,\r\n    slidesToShow: 7,\r\n    slidesToScroll: 1,\r\n    autoplay: false,\r\n    speed: 3000,\r\n    autoplaySpeed: 2000,\r\n    pauseOnHover: false,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1200,\r\n        settings: {\r\n          slidesToShow: 5,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 992,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 576,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  export default settings;"],"names":["DetailsTv","id","useParams","detailsTv","setDetailsTv","useState","backdrop_path_tv","poster_path_tv","genres_tv","title_tv","vote_average_tv","vote_count_tv","original_language_tv","episode_run_time_tv","first_air_date_tv","overview_tv","taglineTV","cast","trailers","reviews","loading","fetchDetailsTv","useCallback","async","urlTvReviews","urlTvVideo","urlTvCast","request","fetch","response","Promise","all","data","map","res","json","backdrop_path","genres","episode_run_time","name","vote_average","vote_count","first_air_date","original_language","overview","poster_path","tagline","results","useEffect","genTv","genre","push","finishTv","slice","join","backgroundTv","settingsvideo","dots","infinite","slidesToShow","slidesToScroll","autoplay","speed","autoplaySpeed","pauseOnHover","responsive","breakpoint","settings","length","content","_jsxs","children","className","_jsx","src","theatre","alt","_Fragment","split","reverse","toUpperCase","toFixed","Slider","Link","to","pathname","state","profile_path","pic","key","title","review","author","href","url"],"sourceRoot":""}